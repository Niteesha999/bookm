require(["js/qlik"], function(qlik) {
    var app = qlik.openApp('XYZ'); // Replace 'XYZ' with your actual app ID

    document.getElementById('bookmarkBtn').addEventListener('click', function () {
        document.getElementById('bookmarkModal').style.display = 'block';
    });

    document.querySelectorAll('.close-button').forEach(button => {
        button.addEventListener('click', function () {
            this.parentElement.parentElement.style.display = 'none';
        });
    });

    var myField = app.field("IBC Name").getData();
    myField.OnData.bind(function() {
        myField.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("client").appendChild(option);
        });
    });

    var myField1 = app.field("ProductLink").getData();
    myField1.OnData.bind(function() {
        myField1.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("product").appendChild(option);
        });
    });

    var myField2 = app.field("Client Segment").getData();
    myField2.OnData.bind(function() {
        myField2.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("clientSegment").appendChild(option);
        });
    });

    window.testVariable = function(bookmarkId) {
        console.log('Test Variable clicked for bookmark ID:', bookmarkId);
        const bookmarkRow = document.querySelector(`button[onclick="testVariable(${bookmarkId})"]`).closest('tr');
        const clients = bookmarkRow.cells[1].textContent.split(', ');
        console.log('Clients:', clients);

        // Clear previous selections and select new clients
        app.field("IBC Name").clear().then(() => {
            return app.field("IBC Name").selectValues(
                clients.map(client => ({ qText: client })),
                true,  // toggle
                true   // soft lock
            );
        }).then(() => {
            console.log('Clients selected:', clients);
            // Update the existing table with the filtered data
            updateTableWithFilteredData();
        }).catch(err => {
            console.error('Error selecting clients or fetching data:', err);
            alert('Error selecting clients or fetching data.');
        });
    };

    function updateTableWithFilteredData() {
        app.getObject('table_custom_DJPtJk', 'DJPtJK').then(model => {
            model.getLayout().then(layout => {
                const table = document.getElementById('table_custom_DJPtJk');
                table.innerHTML = ''; // Clear existing table data
                
                layout.qHyperCube.qDataPages[0].qMatrix.forEach(row => {
                    const tr = document.createElement('tr');
                    row.forEach(cell => {
                        const td = document.createElement('td');
                        td.textContent = cell.qText || '-';
                        tr.appendChild(td);
                    });
                    table.appendChild(tr);
                });
            }).catch(err => {
                console.error('Error getting layout:', err);
                alert('Error getting layout.');
            });
        }).catch(err => {
            console.error('Error getting object:', err);
            alert('Error getting object.');
        });
    }
});
