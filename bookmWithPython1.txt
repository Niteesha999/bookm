<!-- Include FontAwesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<style>
    .bookmark-btn {
        background-color: #11c4ff;
        color: white;
        padding: 2px 10px;
        border: none;
        border-radius: 5px;
        font-size: 17px;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .bookmark-btn::before {
        content: url('https://www.flaticon.com/free-icon/favorite_9775292');
        margin-right: 5px;
    }

    .edit-btn, .delete-btn {
        background-color: #154360;
        color: white;
        padding: 5px 7px;
        margin-left: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .delete-btn {
        background-color: #0076b6;
    }

    .delete-btn:hover {
        background-color: #154360;
    }

    .modal {
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .bookmarks-modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content, .bookmarks-modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
        border-radius: 5px;
    }

    .close-button {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close-button:hover, .close-button:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-size: 15px;
    }

    .save-btn, .view-bookmarks-btn {
        background-color: #00416b;
        color: white;
        padding: 10px 20px;
        margin-right: 8px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .save-btn:hover, .view-bookmarks-btn:hover {
        background-color: #0097C7;
    }

    .bookmarks-list {
        list-style: none;
        padding: 0;
    }

    .bookmarks-list li {
        font-size: 14px;
        margin-bottom: 10px;
        border-bottom: 1px solid #ddd;
        padding-bottom: 10px;
    }

    .selected-list {
        padding: 5px;
        font-size: 14px;
    }

    .selected-item {
        display: inline-block;
        margin: 2px;
        padding: 2px 5px;
        background-color: #cce5ff;
        border-radius: 4px;
    }

    .selected-item i {
        margin-left: 5px;
        cursor: pointer;
    }

    input[type=reset] {
        background-color: #0076b6;
        color: white;
        padding: 10px 20px;
        margin-left: 150px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
</style>

<button id="bookmarkBtn" class="bookmark-btn" style="float: right;"><i class="fa fa-book"></i>Bookmark</button>
<div id="bookmarkModal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Add Bookmark</h2>
        <form id="bookmarkForm">
            <div class="form-group">
                <label for="bookmarkName">Bookmark Name:</label>
                <input type="text" id="bookmarkName" name="bookmarkName" required>
            </div>
            <div class="form-group">
                <label for="client">Client:</label>
                <select id="client" name="client" multiple onchange="updateSelectedList('client', 'selectedClients')">
                </select>
                <div id="selectedClients" class="selected-list"></div>
            </div>
            <div class="form-group">
                <label for="product">Product:</label>
                <select id="product" name="product" multiple onchange="updateSelectedList('product', 'selectedProducts')">
                </select>
                <div id="selectedProducts" class="selected-list"></div>
            </div>
            <div class="form-group">
                <label for="clientSegment">Client Segment:</label>
                <select id="clientSegment" name="clientSegment" multiple onchange="updateSelectedList('clientSegment', 'selectedSegments')">
                </select>
                <div id="selectedSegments" class="selected-list"></div>
            </div>
            <input type="hidden" id="editIndex" value="">
            <button type="submit" class="save-btn">Save</button>
            <button type="button" class="view-bookmarks-btn" onclick="viewSavedBookmarks()">Saved Bookmarks</button>
            <input type="reset" value="Reset" />
        </form>
    </div>
</div>
<div id="bookmarksModal" class="bookmarks-modal">
    <div class="bookmarks-modal-content">
        <span class="close-button">&times;</span>
        <h2>Saved Bookmarks</h2>
        <ul id="bookmarksList" class="bookmarks-list">
        </ul>
    </div>
</div>

<script>
function updateSelectedList(selectId, listId) {
    const select = document.getElementById(selectId);
    const list = document.getElementById(listId);
    list.innerHTML = '';
    Array.from(select.selectedOptions).forEach(option => {
        const item = document.createElement('span');
        item.className = 'selected-item';
        item.textContent = option.text;
        const removeBtn = document.createElement('i');
        removeBtn.className = 'fa fa-times';
        removeBtn.onclick = function() {
            option.selected = false;
            updateSelectedList(selectId, listId);
        };
        item.appendChild(removeBtn);
        list.appendChild(item);
    });
}

function viewSavedBookmarks() {
    displaySavedBookmarks();
    document.getElementById('bookmarksModal').style.display = 'block';
}

function displaySavedBookmarks() {
    fetch('http://localhost:5000/bookmarks')
    .then(response => response.json())
    .then(data => {
        const listElement = document.getElementById('bookmarksList');
        listElement.innerHTML = '';
        data.forEach((bookmark, index) => {
            const li = document.createElement('li');
            li.innerHTML = `<strong><u>${bookmark.bookmarkName}</u></strong>
                <p>Clients: ${bookmark.client ? bookmark.client.join(', ') : 'N/A'}</p>
                <p>Products: ${bookmark.product ? bookmark.product.join(', ') : 'N/A'}</p>
                <p>Client Segments: ${bookmark.clientSegment ? bookmark.clientSegment.join(', ') : 'N/A'}</p>
                <button class="edit-btn" onclick="editBookmark(${index})">Edit</button>
                <button class="delete-btn" onclick="deleteBookmark(${index})">Delete</button>`;
            listElement.appendChild(li);
        });
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}

function deleteBookmark(index) {
    const bookmarks = JSON.parse(localStorage.getItem('bookmarks')) || [];
    const bookmark = bookmarks[index];
    fetch(`http://localhost:5000/delete/${bookmark.id}`, {
        method: 'DELETE',
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        viewSavedBookmarks();
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}

function editBookmark(index) {
    const bookmarks = JSON.parse(localStorage.getItem('bookmarks')) || [];
    if (index >= 0 && index < bookmarks.length) {
        const bookmark = bookmarks[index];
        document.getElementById('bookmarkName').value = bookmark.bookmarkName;
        document.getElementById('editIndex').value = index;
        setSelectedOptions('client', bookmark.client);
        setSelectedOptions('product', bookmark.product);
        setSelectedOptions('clientSegment', bookmark.clientSegment);

        bookmarks.splice(index, 1); // Remove the bookmark being edited
        localStorage.setItem('bookmarks', JSON.stringify(bookmarks));

        document.getElementById('bookmarksModal').style.display = 'none';
        document.getElementById('bookmarkModal').style.display = 'block';
    }
}

function setSelectedOptions(selectId, values) {
    const select = document.getElementById(selectId);
    Array.from(select.options).forEach(option => {
        option.selected = values.includes(option.value);
    });
    updateSelectedList(selectId, 'selected' + selectId.charAt(0).toUpperCase() + selectId.slice(1) + 's');
}

document.getElementById('bookmarkForm').addEventListener('submit', function (e) {
    e.preventDefault();
    const index = document.getElementById('editIndex').value;
    const bookmarkName = document.getElementById('bookmarkName').value;
    const client = Array.from(document.getElementById('client').selectedOptions).map(option => option.value);
    const product = Array.from(document.getElementById('product').selectedOptions).map(option => option.value);
    const clientSegment = Array.from(document.getElementById('clientSegment').selectedOptions).map(option => option.value);
    const bookmark = { bookmarkName, client, product, clientSegment };

    if (index === "") {
        saveBookmark(bookmark);
    } else {
        updateBookmark(index, bookmark);
    }

    document.getElementById('bookmarkModal').style.display = 'block';
    resetForm();
});

document.getElementById('bookmarkForm').addEventListener('reset', function(){
    document.getElementById('selectedClients').innerHTML = '';
    document.getElementById('selectedProducts').innerHTML = '';
    document.getElementById('selectedSegments').innerHTML = '';
});

function saveBookmark(bookmark) {
    fetch('http://localhost:5000/save', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(bookmark),
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}

function updateBookmark(index, updatedBookmark) {
    const bookmarks = JSON.parse(localStorage.getItem('bookmarks')) || [];
    const bookmark = bookmarks[index];
    fetch(`http://localhost:5000/update/${bookmark.id}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(updatedBookmark),
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}

require(["js/qlik"], function(qlik) {
    var app = qlik.openApp('');
    document.getElementById('bookmarkBtn').addEventListener('click', function () {
        document.getElementById('bookmarkModal').style.display = 'block';
    });

    document.querySelectorAll('.close-button').forEach(button => {
        button.addEventListener('click', function () {
            this.parentElement.parentElement.style.display = 'none';
        });
    });

    var myField = app.field("IBC Name").getData();
    myField.OnData.bind(function() {
        myField.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("client").appendChild(option);
        });
    });

    var myField1 = app.field("ProductLink").getData();
    myField1.OnData.bind(function() {
        myField1.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("product").appendChild(option);
        });
    });

    var myField2 = app.field("Client Segment").getData();
    myField2.OnData.bind(function() {
        myField2.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("clientSegment").appendChild(option);
        });
    });
});
</script>
