Server script-
const express = require('express');
const bodyParser = require('body-parser');
const sql = require('mssql');

const app = express();
app.use(bodyParser.json());

// SQL Server configuration
const dbConfig = {
    user: 'your_db_user',
    password: 'your_db_password',
    server: 'your_server_name',
    database: 'BookmarkDB',
};

sql.connect(dbConfig, err => {
    if (err) {
        console.error('Database connection failed: ', err);
    } else {
        console.log('Connected to database');
    }
});

app.post('/saveBookmark', (req, res) => {
    const { bookmarkName, client, product, clientSegment } = req.body;

    const query = `
        INSERT INTO Bookmarks (BookmarkName, Client, Product, ClientSegment)
        VALUES (@bookmarkName, @client, @product, @clientSegment)
    `;

    const request = new sql.Request();
    request.input('bookmarkName', sql.NVarChar, bookmarkName);
    request.input('client', sql.NVarChar, client.join(', '));
    request.input('product', sql.NVarChar, product.join(', '));
    request.input('clientSegment', sql.NVarChar, clientSegment.join(', '));

    request.query(query, (err, result) => {
        if (err) {
            console.error('Error saving bookmark: ', err);
            res.status(500).send('Error saving bookmark');
        } else {
            res.send('Bookmark saved successfully');
        }
    });
});

app.get('/getBookmarks', (req, res) => {
    const query = 'SELECT * FROM Bookmarks';

    const request = new sql.Request();
    request.query(query, (err, result) => {
        if (err) {
            console.error('Error retrieving bookmarks: ', err);
            res.status(500).send('Error retrieving bookmarks');
        } else {
            res.json(result.recordset);
        }
    });
});

app.delete('/deleteBookmark/:id', (req, res) => {
    const { id } = req.params;

    const query = 'DELETE FROM Bookmarks WHERE Id = @id';

    const request = new sql.Request();
    request.input('id', sql.Int, id);

    request.query(query, (err, result) => {
        if (err) {
            console.error('Error deleting bookmark: ', err);
            res.status(500).send('Error deleting bookmark');
        } else {
            res.send('Bookmark deleted successfully');
        }
    });
});

app.put('/updateBookmark/:id', (req, res) => {
    const { id } = req.params;
    const { bookmarkName, client, product, clientSegment } = req.body;

    const query = `
        UPDATE Bookmarks
        SET BookmarkName = @bookmarkName,
            Client = @client,
            Product = @product,
            ClientSegment = @clientSegment
        WHERE Id = @id
    `;

    const request = new sql.Request();
    request.input('id', sql.Int, id);
    request.input('bookmarkName', sql.NVarChar, bookmarkName);
    request.input('client', sql.NVarChar, client.join(', '));
    request.input('product', sql.NVarChar, product.join(', '));
    request.input('clientSegment', sql.NVarChar, clientSegment.join(', '));

    request.query(query, (err, result) => {
        if (err) {
            console.error('Error updating bookmark: ', err);
            res.status(500).send('Error updating bookmark');
        } else {
            res.send('Bookmark updated successfully');
        }
    });
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});



----------------------------------------------------------------------------------------------------------------------


Qliksense script-

<!-- ------------------------------- BOOKMARK --------------------------------- -->                                                   

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<style>
    .bookmark-btn {
        background-color: #11c4ff;
        color: white;
        padding: 2px 10px;
        border: none;
        border-radius: 5px;
        font-size: 17px;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
    .bookmark-btn::before {
        content: url('https://www.flaticon.com/free-icon/favorite_9775292');
        margin-right: 5px;
    }
    .edit-btn, .delete-btn {
        background-color: #154360;
        color: white;
        padding: 5px 7px;
        margin-left: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .delete-btn {
        background-color: #0076b6;
    }
    .delete-btn:hover {
        background-color: #154360;
    }
    .modal {
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }
    .bookmarks-modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }
    .modal-content, .bookmarks-modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
        border-radius: 5px;
    }
    .close-button {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }
    .close-button:hover, .close-button:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
    .form-group {
        margin-bottom: 20px;
    }
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-size: 15px;
    }
    .save-btn, .view-bookmarks-btn {
        background-color: #00416b;
        color: white;
        padding: 10px 20px;
        margin-right: 8px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .save-btn:hover, .view-bookmarks-btn:hover {
        background-color: #0097C7;
    }
    .bookmarks-list {
        list-style: none;
        padding: 0;
    }
    .bookmarks-list li {
        font-size: 14px;
        margin-bottom: 10px;
        border-bottom: 1px solid #ddd;
        padding-bottom: 10px;
    }
    .selected-list {
        padding: 5px;
        font-size: 14px;
    }
    .selected-item {
        display: inline-block;
        margin: 2px;
        padding: 2px 5px;
        background-color: #cce5ff;
        border-radius: 4px;
    }
    .selected-item i {
        margin-left: 5px;
        cursor: pointer;
    }
    input[type=reset] {
        background-color: #0076b6;
        color: white;
        padding: 10px 20px;
        margin-left: 150px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
</style>

<button id="bookmarkBtn" class="bookmark-btn" style="float: right;"><i class="fa fa-book"></i>Bookmark</button>
<div id="bookmarkModal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Add Bookmark</h2>
        <form id="bookmarkForm">
            <div class="form-group">
                <label for="bookmarkName">Bookmark Name:</label>
                <input type="text" id="bookmarkName" name="bookmarkName" required>
            </div>
            <div class="form-group">
                <label for="client">Client:</label>
                <select id="client" name="client" multiple onchange="updateSelectedList('client', 'selectedClients')">
                </select>
                <div id="selectedClients" class="selected-list"></div>
            </div>
            <div class="form-group">
                <label for="product">Product:</label>
                <select id="product" name="product" multiple onchange="updateSelectedList('product', 'selectedProducts')">
                </select>
                <div id="selectedProducts" class="selected-list"></div>
            </div>
            <div class="form-group">
                <label for="clientSegment">Client Segment:</label>
                <select id="clientSegment" name="clientSegment" multiple onchange="updateSelectedList('clientSegment', 'selectedSegments')">
                </select>
                <div id="selectedSegments" class="selected-list"></div>
            </div>
            <input type="hidden" id="editIndex" value="">
            <button type="submit" class="save-btn">Save</button>
            <button type="button" class="view-bookmarks-btn" onclick="viewSavedBookmarks()">Saved Bookmarks</button>
            <input type="reset" value="Reset" />
        </form>
    </div>
</div>
<div id="bookmarksModal" class="bookmarks-modal">
    <div class="bookmarks-modal-content">
        <span class="close-button">&times;</span>
        <h2>Saved Bookmarks</h2>
        <ul id="bookmarksList" class="bookmarks-list">
        </ul>
    </div>
</div>

<script>
    function updateSelectedList(selectId, listId) {
        const select = document.getElementById(selectId);
        const list = document.getElementById(listId);
        list.innerHTML = '';
        Array.from(select.selectedOptions).forEach(option => {
            const item = document.createElement('span');
            item.className = 'selected-item';
            item.textContent = option.text;
            const removeBtn = document.createElement('i');
            removeBtn.className = 'fa fa-times';
            removeBtn.onclick = function() {
                option.selected = false;
                updateSelectedList(selectId, listId);
            };
            item.appendChild(removeBtn);
            list.appendChild(item);
        });
    }

    function viewSavedBookmarks() {
        displaySavedBookmarks();
        document.getElementById('bookmarksModal').style.display = 'block';
    }

    function displaySavedBookmarks() {
        fetch('http://localhost:3000/getBookmarks')
            .then(response => response.json())
            .then(bookmarks => {
                const listElement = document.getElementById('bookmarksList');
                listElement.innerHTML = '';
                bookmarks.forEach((bookmark, index) => {
                    const li = document.createElement('li');
                    li.innerHTML = `<strong><u>${bookmark.BookmarkName}</u></strong>
                        <p>Clients: ${bookmark.Client || 'N/A'}</p>
                        <p>Products: ${bookmark.Product || 'N/A'}</p>
                        <p>Client Segments: ${bookmark.ClientSegment || 'N/A'}</p>
                        <button class="edit-btn" onclick="editBookmark(${bookmark.Id})">Edit</button>
                        <button class="delete-btn" onclick="deleteBookmark(${bookmark.Id})">Delete</button>`;
                    listElement.appendChild(li);
                });
            });
    }

    function deleteBookmark(id) {
        fetch(`http://localhost:3000/deleteBookmark/${id}`, { method: 'DELETE' })
            .then(response => response.text())
            .then(message => {
                alert(message);
                viewSavedBookmarks();
            });
    }

    function editBookmark(id) {
        fetch(`http://localhost:3000/getBookmark/${id}`)
            .then(response => response.json())
            .then(bookmark => {
                document.getElementById('bookmarkName').value = bookmark.BookmarkName;
                document.getElementById('editIndex').value = id;
                setSelectedOptions('client', bookmark.Client ? bookmark.Client.split(', ') : []);
                setSelectedOptions('product', bookmark.Product ? bookmark.Product.split(', ') : []);
                setSelectedOptions('clientSegment', bookmark.ClientSegment ? bookmark.ClientSegment.split(', ') : []);
                document.getElementById('bookmarksModal').style.display = 'none';
                document.getElementById('bookmarkModal').style.display = 'block';
            });
    }

    function setSelectedOptions(selectId, values) {
        const select = document.getElementById(selectId);
        Array.from(select.options).forEach(option => {
            option.selected = values.includes(option.value);
        });
        updateSelectedList(selectId, 'selected' + selectId.charAt(0).toUpperCase() + selectId.slice(1) + 's');
    }

    document.getElementById('bookmarkForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const id = document.getElementById('editIndex').value;
        const bookmarkName = document.getElementById('bookmarkName').value;
        const client = Array.from(document.getElementById('client').selectedOptions).map(option => option.value);
        const product = Array.from(document.getElementById('product').selectedOptions).map(option => option.value);
        const clientSegment = Array.from(document.getElementById('clientSegment').selectedOptions).map(option => option.value);
        const bookmark = { bookmarkName, client, product, clientSegment };

        if (id === "") {
            saveBookmark(bookmark);
        } else {
            updateBookmark(id, bookmark);
        }
        document.getElementById('bookmarkModal').style.display = 'block';
        resetForm();
    });

    document.getElementById('bookmarkForm').addEventListener('reset', function(){
        document.getElementById('selectedClients').innerHTML = '';
        document.getElementById('selectedProducts').innerHTML = '';
        document.getElementById('selectedSegments').innerHTML = '';
    });

    function saveBookmark(bookmark) {
        fetch('http://localhost:3000/saveBookmark', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(bookmark),
        })
        .then(response => response.text())
        .then(message => {
            alert(message);
        });
    }

    function updateBookmark(id, updatedBookmark) {
        fetch(`http://localhost:3000/updateBookmark/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedBookmark),
        })
        .then(response => response.text())
        .then(message => {
            alert(message);
        });
    }

    function resetForm() {
        document.getElementById('bookmarkForm').reset();
        updateSelectedList('client', 'selectedClients');
        updateSelectedList('product', 'selectedProducts');
        updateSelectedList('clientSegment', 'selectedSegments');
        document.getElementById('editIndex').value = '';
    }

    require(["js/qlik"], function(qlik) {
        var app = qlik.openApp('');
        document.getElementById('bookmarkBtn').addEventListener('click', function () {
            document.getElementById('bookmarkModal').style.display = 'block';
        });
        document.querySelectorAll('.close-button').forEach(button => {
            button.addEventListener('click', function () {
                this.parentElement.parentElement.style.display = 'none';
            });
        });
        var myField = app.field("IBC Name").getData();
        myField.OnData.bind(function() {
            myField.rows.forEach(function(row) {
                var option = document.createElement("option");
                option.value = row.qText;
                option.text = row.qText;
                document.getElementById("client").appendChild(option);
            });
        });
        var myField1 = app.field("ProductLink").getData();
        myField1.OnData.bind(function() {
            myField1.rows.forEach(function(row) {
                var option = document.createElement("option");
                option.value = row.qText;
                option.text = row.qText;
                document.getElementById("product").appendChild(option);
            });
        });
        var myField2 = app.field("Client Segment").getData();
        myField2.OnData.bind(function() {
            myField2.rows.forEach(function(row) {
                var option = document.createElement("option");
                option.value = row.qText;
                option.text = row.qText;
                document.getElementById("clientSegment").appendChild(option);
            });
        });
    });
</script>
