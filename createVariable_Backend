from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
import urllib.parse
from datetime import datetime
import pytz

app = Flask(__name__)
CORS(app)

# Connection string
trusted_conn_str = 'DRIVER={ODBC Driver 17 for SQL Server};SERVER=GBRDSM050001065\SAC_SQLVIRT_TEST;DATABASE=SRDWStg;TRUSTED_CONNECTION=yes'
encoded_conn_str = urllib.parse.quote_plus(trusted_conn_str)

# Database configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'mssql+pyodbc:///?odbc_connect=' + encoded_conn_str
db = SQLAlchemy(app)

# Define EST timezone
est = pytz.timezone('US/Eastern')

class Bookmark(db.Model):
    __tablename__ = 'Bookmarks'
    id = db.Column('Id', db.Integer, primary_key=True)
    bookmark_name = db.Column('BookmarkName', db.String(100))
    client = db.Column('Client', db.String(500))
    product = db.Column('Product', db.String(500))
    client_segment = db.Column('ClientSegment', db.String(500))
    created_on = db.Column('CreatedOn', db.DateTime)
    created_by = db.Column('CreatedBy', db.String(255), nullable=False)
    updated_on = db.Column('UpdatedOn', db.DateTime, nullable=True)
    updated_by = db.Column('UpdatedBy', db.String(255), nullable=True)
    bookmark_qlik_format = db.Column('bookmarkQlikFormat', db.String(1000))

def construct_qlik_format(client, product, client_segment):
    qlik_format = "{<[Client]={"
    qlik_format += ",".join([f"'{c}'" for c in client])
    qlik_format += "},[Product]={"
    qlik_format += ",".join([f"'{p}'" for p in product])
    qlik_format += "},[Client Segment]={"
    qlik_format += ",".join([f"'{cs}'" for cs in client_segment])
    qlik_format += "}>}"
    return qlik_format

@app.route('/save', methods=['POST'])
def save_bookmark():
    try:
        data = request.json
        username = data['username']
        created_on_est = datetime.now(est)  # Convert to EST
        client = data['client']
        product = data['product']
        client_segment = data['clientSegment']
        qlik_format = construct_qlik_format(client, product, client_segment)
        new_bookmark = Bookmark(
            bookmark_name=data['bookmarkName'],
            client=','.join(client),
            product=','.join(product),
            client_segment=','.join(client_segment),
            created_on=created_on_est,
            created_by=username,
            bookmark_qlik_format=qlik_format
        )
        db.session.add(new_bookmark)
        db.session.commit()
        return jsonify({'message': 'Bookmark saved successfully!'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/update/<int:id>', methods=['PUT'])
def update_bookmark(id):
    try:
        data = request.json
        bookmark = Bookmark.query.get(id)
        if bookmark:
            bookmark.bookmark_name = data['bookmarkName']
            bookmark.client = ','.join(data['client'])
            bookmark.product = ','.join(data['product'])
            bookmark.client_segment = ','.join(data['clientSegment'])
            bookmark.updated_on = datetime.now(est)  # Convert to EST
            bookmark.updated_by = data['username']
            bookmark.bookmark_qlik_format = construct_qlik_format(data['client'], data['product'], data['clientSegment'])
            db.session.commit()
            return jsonify({'message': 'Bookmark updated successfully!'})
        return jsonify({'message': 'Bookmark not found!'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/delete/<int:id>', methods=['DELETE'])
def delete_bookmark(id):
    try:
        bookmark = Bookmark.query.get(id)
        if bookmark:
            db.session.delete(bookmark)
            db.session.commit()
            return jsonify({'message': 'Bookmark deleted successfully!'})
        return jsonify({'message': 'Bookmark not found!'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/bookmarks', methods=['GET'])
def get_bookmarks():
    try:
        bookmarks = Bookmark.query.all()
        result = []
        for bookmark in bookmarks:
            result.append({
                'id': bookmark.id,
                'bookmarkName': bookmark.bookmark_name,
                'client': bookmark.client.split(','),
                'product': bookmark.product.split(','),
                'clientSegment': bookmark.client_segment.split(','),
                'bookmarkQlikFormat': bookmark.bookmark_qlik_format
            })
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True)






function saveBookmark(bookmark) {
    fetch('http://localhost:5000/save', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(bookmark),
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        viewSavedBookmarks();

        // Create Qlik variables
        app.variable.create({ qName: 'clientVar_' + bookmark.bookmarkName, qDefinition: bookmark.client.join('|') });
        app.variable.create({ qName: 'productVar_' + bookmark.bookmarkName, qDefinition: bookmark.product.join('|') });
        app.variable.create({ qName: 'clientSegmentVar_' + bookmark.bookmarkName, qDefinition: bookmark.clientSegment.join('|') });
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}



function viewSavedBookmarks() {
    fetch('http://localhost:5000/bookmarks')
    .then(response => response.json())
    .then(data => {
        const listElement = document.getElementById('bookmarksList');
        listElement.innerHTML = '';

        data.forEach(bookmark => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${bookmark.bookmarkName}</td>
                <td id="clientVar_${bookmark.bookmarkName}">${bookmark.client ? bookmark.client.join(', ') : 'N/A'}</td>
                <td id="productVar_${bookmark.bookmarkName}">${bookmark.product ? bookmark.product.join(', ') : 'N/A'}</td>
                <td id="clientSegmentVar_${bookmark.bookmarkName}">${bookmark.clientSegment ? bookmark.clientSegment.join(', ') : 'N/A'}</td>
                <td>
                    <div class="action-buttons">
                        <button class="edit-btn" onclick="editBookmark(${bookmark.id}, '${bookmark.bookmarkName}', '${bookmark.client.join(', ')}', '${bookmark.product.join(', ')}', '${bookmark.clientSegment.join(', ')}')">Edit</button>
                        <button class="delete-btn" onclick="deleteBookmark(${bookmark.id})">Delete</button>
                    </div>
                </td>`;
            listElement.appendChild(row);

            // Get Qlik variable content
            app.variable.getContent('clientVar_' + bookmark.bookmarkName, function(reply) {
                document.getElementById(`clientVar_${bookmark.bookmarkName}`).textContent = reply.qContent.qString;
            });
            app.variable.getContent('productVar_' + bookmark.bookmarkName, function(reply) {
                document.getElementById(`productVar_${bookmark.bookmarkName}`).textContent = reply.qContent.qString;
            });
            app.variable.getContent('clientSegmentVar_' + bookmark.bookmarkName, function(reply) {
                document.getElementById(`clientSegmentVar_${bookmark.bookmarkName}`).textContent = reply.qContent.qString;
            });
        });
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}



require(["js/qlik"], function(qlik) {
    var app = qlik.openApp('YOUR_APP_ID_HERE', {
        host: window.location.hostname,
        prefix: '',
        port: window.location.port,
        isSecure: window.location.protocol === "https:"
    });

    document.getElementById('bookmarkBtn').addEventListener('click', function () {
        document.getElementById('bookmarkModal').style.display = 'block';
    });

    document.querySelectorAll('.close-button').forEach(button => {
        button.addEventListener('click', function () {
            this.parentElement.parentElement.style.display = 'none';
        });
    });

    var myField = app.field("IBC Name").getData();
    myField.OnData.bind(function() {
        myField.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("client").appendChild(option);
        });
    });

    var myField1 = app.field("ProductLink").getData();
    myField1.OnData.bind(function() {
        myField1.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("product").appendChild(option);
        });
    });

    var myField2 = app.field("Client Segment").getData();
    myField2.OnData.bind(function() {
        myField2.rows.forEach(function(row) {
            var option = document.createElement("option");
            option.value = row.qText;
            option.text = row.qText;
            document.getElementById("clientSegment").appendChild(option);
        });
    });
});
