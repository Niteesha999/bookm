<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title>Qlik Sense Mashup</title>
  <meta charset="utf-8">
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="cleartype" content="on">
  <script src="../resources/assets/external/requirejs/require.js"></script>
  <!-- Bootstrap core CSS -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="../resources/autogenerated/qlik-styles.css">
  <style>
    /* Set padding to make room for bootstrap menu */
    body {
      padding-bottom: 30px;
    }
    /* Set the height for objects */
    div.qvobject, div.qvplaceholder {
      padding: 30px 10px 10px 10px;
      height: 400px;
    }
    .qcmd {
      cursor: pointer;
    }
    #popup {
      background-color: #f76c6c8d;
      color: #FFFFFF;
      position: fixed;
      padding: 10px;
      margin: 10px;
      top: 0px;
      right: 0px;
      border-radius: 5PX;
    }
    /* Overrides Bootstrap navbar linked to any object with selections bar */
    .navbar-fixed-top {
      position: relative;
      z-index: 100;
    }
  </style>
</head>
<body role="document" style="overflow: auto;">
  <div id="CurrentSelections" class="qvselections" style="position:relative; top:0px; left:0px; width:100%; height:30px;"></div>
  <!-- Fixed navbar -->
  <div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <span class="navbar-brand" data-toggle="tooltip" data-placement="right" data-original-title="Qlik Sense Mashup">Qlik Sense Mashup</span>
      </div>
      <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav pull-right">
          <li><a class="qcmd" data-qcmd="ClearAll">ClearAll</a></li>
          <li><a class="qcmd" data-qcmd="Back">Back</a></li>
          <li><a class="qcmd" data-qcmd="Forward">Forward</a></li>
          <li><a class="qcmd" data-qcmd="LockAll">Lock</a></li>
          <li><a class="qcmd" data-qcmd="UnlockAll">Unlock</a></li>
          <li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown">Bookmarks <b class="caret"></b></a>
            <ul class="dropdown-menu dropdown-menu-right" id="qbmlist"></ul>
          </li>
          <li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown">More <b class="caret"></b></a>
            <ul class="dropdown-menu dropdown-menu-right">
              <li><a class="qcmd" data-qcmd="CreateBm">Create Bookmark</a></li>
            </ul>
          </li>
        </ul>
      </div>
    </div>
  </div>
  <div class="container">
    <div class="row">
      <div class="col-sm-12 qvobject" id="QV01"></div>
    </div>
  </div>
  <!-- Bootstrap Modals -->
  <div class="modal" id="createBmModal">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h4 class="modal-title">Create Bookmark</h4>
        </div>
        <div class="modal-body">
          <form>
            <label for="bmtitle" class="control-label">Title</label>
            <input type="text" class="form-control" id="bmtitle">
            <label for="bmdesc" class="control-label">Description</label>
            <input type="text" class="form-control" id="bmdesc">
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" data-qcmd="createBm">Create Bookmark</button>
        </div>
      </div>
    </div>
  </div>
  <!-- Error Popup -->
  <div id="popup">
    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    <p id="popupText"></p>
  </div>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
  <script>
    var prefix = window.location.pathname.substr(0, window.location.pathname.toLowerCase().lastIndexOf("/extensions") + 1);
    var config = {
      host: window.location.hostname,
      prefix: prefix,
      port: window.location.port,
      isSecure: window.location.protocol === "https:"
    };

    require.config({
      baseUrl: (config.isSecure ? "https://" : "http://") + config.host + (config.port ? ":" + config.port : "") + config.prefix + "resources"
    });

    require(["js/qlik"], function (qlik) {
      qlik.on("error", function (error) {
        $("#popupText").append(error.message + "<br>");
        $("#popup").delay(1000).fadeOut(1000);
      });

      var app = qlik.openApp('your-app-id', config);

      // Function to create a bookmark
      function createBookmark(title, description) {
        app.bookmark.create({
          title: title,
          description: description,
          qPrivate: true // Ensuring it's private to the user
        }).then(function (reply) {
          if (reply.qInfo && reply.qInfo.qId) {
            console.log('Bookmark Created: ', reply.qInfo.qId);
            alert('Bookmark Created: ' + reply.qInfo.qId);
          } else {
            console.error('Bookmark creation failed: ', reply);
            alert('Bookmark creation failed');
          }
        }).catch(function (error) {
          console.error('Error creating bookmark: ', error);
          alert('Error creating bookmark: ' + error);
        });
      }

      // Function to apply a bookmark
      function applyBookmark(bookmarkId) {
        app.bookmark.apply(bookmarkId).then(function () {
          console.log('Bookmark applied successfully');
          alert('Bookmark applied successfully');
        }).catch(function (error) {
          console.error('Error applying bookmark: ', error);
          alert('Error applying bookmark: ' + error);
        });
      }

      // Example usage: Event listeners for buttons
      document.getElementById('createBookmarkBtn').addEventListener('click', function () {
        var title = prompt("Enter bookmark title:");
        var description = prompt("Enter bookmark description:");
        if (title && description) {
          createBookmark(title, description);
        } else {
          alert('Title and description are required to create a bookmark.');
        }
      });

      document.getElementById('applyBookmarkBtn').addEventListener('click', function () {
        var bookmarkId = document.getElementById('bookmarkIdInput').value;
        if (bookmarkId) {
          applyBookmark(bookmarkId);
        } else {
          alert('Bookmark ID is required to apply a bookmark.');
        }
      });

      // Example usage: App-level commands
      $("[data-qcmd]").on('click', function () {
        var $element = $(this);
        switch ($element.data('qcmd')) {
          case 'clearAll':
            app.clearAll();
            break;
          case 'back':
            app.back();
            break;
          case 'forward':
            app.forward();
            break;
          case 'lockAll':
            app.lockAll();
            break;
          case 'unlockAll':
            app.unlockAll();
            break;
          case 'createBm':
            var title = $('#bmtitle').val(),
                desc = $('#bmdesc').val();
            createBookmark(title, desc);
            $('#createBmModal').modal('hide');
            break;
        }
      });

      // Get bookmarks
      app.getList("BookmarkList", function (reply) {
        var str = "";
        reply.qBookmarkList.qItems.forEach(function (value) {
          if (value.qData.title) {
            str += '<li><a data-id="' + value.qInfo.qId + '">' + value.qData.title + '</a></li>';
          }
        });
        str += '<li><a data-cmd="create">Create</a></li>';
        $('#qbmlist').html(str).find('a').on('click', function () {
          var id = $(this).data('id');
          if (id) {
            app.bookmark.apply(id);
          } else {
            var cmd = $(this).data('cmd');
            if (cmd === "create") {
              $('#createBmModal').modal();
            }
          }
        });
      });

      // Open app objects
      app.getObject('QV01', 'your-object-id');
    });
  </script>
</body>
</html>
