import re

def convert_netezza_to_athena(netezza_query):
    """
    Converts a Netezza SQL query into an Athena-compatible SQL query.

    :param netezza_query: str, the input SQL query written in Netezza syntax
    :return: str, the converted SQL query for Athena
    """
    # Define a mapping of Netezza functions to Athena equivalents
    replacements = {
        # Null handling
        r"\bNVL\((.*?),\s*(.*?)\)": r"COALESCE(\1, \2)",

        # String functions
        r"\bSUBSTR\((.*?),\s*(\d+),\s*(\d+)\)": r"SUBSTRING(\1, \2, \3)",
        r"\bLENGTH\((.*?)\)": r"LENGTH(\1)",
        r"\bLPAD\((.*?),\s*(\d+),\s*(.*?)\)": r"LPAD(\1, \2, \3)",
        r"\bRPAD\((.*?),\s*(\d+),\s*(.*?)\)": r"RPAD(\1, \2, \3)",

        # Date and time functions
        r"\bTO_DATE\((.*?),\s*'(.*?)'\)": r"DATE_PARSE(\1, '\2')",
        r"\bTO_CHAR\((.*?),\s*'(.*?)'\)": r"DATE_FORMAT(\1, '\2')",
        r"\bDATE_PART\((.*?),\s*(.*?)\)": r"EXTRACT(\1 FROM \2)",
        r"\bDATE_TRUNC\((.*?),\s*(.*?)\)": r"DATE_TRUNC(\1, \2)",

        # Conditional functions
        r"\bDECODE\((.*?),\s*(.*?),\s*(.*?),\s*(.*?)\)": r"CASE WHEN \1 = \2 THEN \3 ELSE \4 END",

        # Mathematical functions
        r"\bMOD\((.*?),\s*(.*?)\)": r"MOD(\1, \2)",
        r"\bABS\((.*?)\)": r"ABS(\1)",
        r"\bCEIL\((.*?)\)": r"CEIL(\1)",
        r"\bFLOOR\((.*?)\)": r"FLOOR(\1)",
        r"\bROUND\((.*?),\s*(\d+)\)": r"ROUND(\1, \2)",
        r"\bLOG\((.*?)\)": r"LOG(\1)",
        r"\bEXP\((.*?)\)": r"EXP(\1)",

        # Window functions
        r"\bROW_NUMBER\(\)\s+OVER\((.*?)\)": r"ROW_NUMBER() OVER(\1)",
        r"\bRANK\(\)\s+OVER\((.*?)\)": r"RANK() OVER(\1)",
        r"\bDENSE_RANK\(\)\s+OVER\((.*?)\)": r"DENSE_RANK() OVER(\1)",
        r"\bLAG\((.*?)\)\s+OVER\((.*?)\)": r"LAG(\1) OVER(\2)",
        r"\bLEAD\((.*?)\)\s+OVER\((.*?)\)": r"LEAD(\1) OVER(\2)",

        # Statistical functions
        r"\bSTDDEV\((.*?)\)": r"STDDEV_SAMP(\1)",
        r"\bCORR\((.*?),\s*(.*?)\)": r"CORR(\1, \2)",
        r"\bVARIANCE\((.*?)\)": r"VAR_SAMP(\1)",

        # Miscellaneous functions
        r"\bTRIM\((.*?)\)": r"TRIM(\1)",
        r"\bLTRIM\((.*?)\)": r"LTRIM(\1)",
        r"\bRTRIM\((.*?)\)": r"RTRIM(\1)",
        r"\bPOSITION\((.*?),\s*(.*?)\)": r"POSITION(\2 IN \1)",
        r"\bUPPER\((.*?)\)": r"UPPER(\1)",
        r"\bLOWER\((.*?)\)": r"LOWER(\1)",
        r"\bREPLACE\((.*?),\s*(.*?),\s*(.*?)\)": r"REPLACE(\1, \2, \3)",
        r"\bCHR\((.*?)\)": r"CHR(\1)",
        r"\bSIGN\((.*?)\)": r"SIGN(\1)",
        r"\bLEAST\((.*?)\)": r"LEAST(\1)",
        r"\bGREATEST\((.*?)\)": r"GREATEST(\1)",

        # Array functions
        r"\bARRAY_SPLIT\((.*?),\s*(.*?)\)": r"SPLIT(\1, \2)",

        # Regular expression functions
        r"\bREGEXP_EXTRACT\((.*?),\s*'(.*?)'\)": r"REGEXP_EXTRACT(\1, '\2')",
        r"\bREGEXP_REPLACE\((.*?),\s*'(.*?)',\s*'(.*?)'\)": r"REGEXP_REPLACE(\1, '\2', '\3')",

        # Conversion functions
        r"\bCAST\((.*?),\s*'(.*?)'\)": r"CAST(\1 AS \2)",
        r"\bTO_NUMBER\((.*?)\)": r"CAST(\1 AS DECIMAL)",
        r"\bTO_CHAR\((.*?)\)": r"CAST(\1 AS VARCHAR)",
    }

    # Apply replacements
    athena_query = netezza_query
    for pattern, replacement in replacements.items():
        athena_query = re.sub(pattern, replacement, athena_query, flags=re.IGNORECASE)

    return athena_query

# Example usage
netezza_query = """
SELECT NVL(employee_name, 'Unknown') AS employee_name,
       SUBSTR(department_name, 1, 10) AS short_department_name,
       TO_DATE(hire_date, 'YYYY-MM-DD') AS formatted_hire_date,
       DECODE(employee_status, 'A', 'Active', 'Inactive') AS status_label,
       ROUND(salary, 2) AS rounded_salary,
       MOD(department_id, 3) AS mod_department_id,
       LENGTH(employee_id) AS id_length,
       LPAD(employee_name, 20, ' ') AS padded_name
FROM employees
WHERE LENGTH(department_name) > 5;
"""

athena_query = convert_netezza_to_athena(netezza_query)
print("Converted Athena Query:\n")
print(athena_query)
