import jaydebeapi
from openpyxl import load_workbook, Workbook
import os

# Path to the Netezza JDBC driver JAR file
jdbc_driver_path = '/path/to/nzjdbc.jar'  # Replace with your actual path to nzjdbc.jar

# Database connection details
url = 'jdbc:netezza://your_server_url:5480/your_database'  # Replace with your server URL and database name
driver_class = 'org.netezza.Driver'

# Read credentials from a text file
def read_credentials(file_path):
    credentials = {}
    with open(file_path, 'r') as file:
        for line in file:
            key, value = line.strip().split('=')
            credentials[key] = value
    return credentials

# Read username and password
credentials_file = 'credentials.txt'
credentials = read_credentials(credentials_file)
username = credentials.get('username')
password = credentials.get('password')

# Load the Excel file and specify the sheet name
excel_file = r'path_to_your_excel_file.xlsx'  # Replace with your file path
workbook = load_workbook(excel_file)
sheet_name = 'your_sheet_name'  # Replace with the actual sheet name
sheet = workbook[sheet_name]  # Load the specific sheet by name

# Path to output text file
output_file = 'output_file.txt'

# Clear the text file if it already exists
if os.path.exists(output_file):
    os.remove(output_file)

# Create a new Excel workbook to store query results
result_workbook = Workbook()
result_sheet = result_workbook.active
result_sheet.title = 'Query_Results'
result_sheet.append(['ID', 'Column1', 'Column2', 'Column3'])  # Adjust column names as needed

# Function to execute a sample SQL query
def execute_sql_query(conn, id_value):
    try:
        # Sample SQL query (modify as needed)
        query = f"SELECT column1, column2, column3 FROM your_table WHERE id_column = '{id_value}'"
        cursor = conn.cursor()
        cursor.execute(query)
        
        # Fetch results
        results = cursor.fetchall()

        # If results are found, return them
        if results:
            print(f"Query executed successfully for ID: {id_value}")
            return results
        else:
            print(f"No results found for ID: {id_value}")
            return None
    except Exception as e:
        print(f"Failed to execute query for ID {id_value}: {e}")
        return None

# Test connection to Netezza and process IDs from Excel
try:
    # Establish a connection using the JDBC driver
    conn = jaydebeapi.connect(driver_class, url, [username, password], jdbc_driver_path)
    print("Connection to Netezza database was successful.")
    
    # Loop through each row in the sheet, get IDs, execute SQL, and write to file
    with open(output_file, 'a') as file:
        for row in sheet.iter_rows(min_row=2, values_only=True):  # Assuming first row is headers
            id_value = row[0]  # Adjust the column index if necessary
            if id_value:  # Ensure the value is not None or empty
                # Step 1: Read the ID
                print(f"Processing ID: {id_value}")

                # Step 2: Execute the SQL query
                results = execute_sql_query(conn, id_value)

                # Step 3: If results are found, write them to the new Excel file
                if results:
                    for result_row in results:
                        result_sheet.append([id_value] + list(result_row))

                    # Step 4: Write the ID to the text file if the query succeeds
                    file.write(f"{id_value}\n")
                    file.flush()  # Ensure immediate write
                    print(f"ID {id_value} written to file.\n")
    
    # Save the new Excel file with query results
    result_workbook.save('query_results.xlsx')
    print("Query results saved to 'query_results.xlsx'.")

    # Close the database connection
    conn.close()
except Exception as e:
    print(f"Failed to connect to the Netezza database: {e}")
